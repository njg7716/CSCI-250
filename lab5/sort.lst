   1 0000               #
   2 0000               # FILE:         $File$
   3 0000               # AUTHOR:       Phil White, RIT 2016
   4 0000               # CONTRIBUTORS:
   5 0000               #		W. Carithers
   6 0000               #		Nicholas Graca
   7 0000               #
   8 0000               # DESCRIPTION:
   9 0000               #	This program is an implementation of merge sort in MIPS
  10 0000               #	assembly 
  11 0000               #
  12 0000               # ARGUMENTS:
  13 0000               #	None
  14 0000               #
  15 0000               # INPUT:
  16 0000               # 	The numbers to be sorted.  The user will enter a 9999 to
  17 0000               #	represent the end of the data
  18 0000               #
  19 0000               # OUTPUT:
  20 0000               #	A "before" line with the numbers in the order they were
  21 0000               #	entered, and an "after" line with the same numbers sorted.
  22 0000               #
  23 0000               # REVISION HISTORY:
  24 0000               #	Aug  08		- P. White, original version
  25 0000               #
  26 0000               
  27 0000               #-------------------------------
  28 0000               
  29 0000               #
  30 0000               # Numeric Constants
  31 0000               #
  32 0000               
  33 0000               PRINT_STRING = 4
  34 0000               PRINT_INT = 1
  35 0000               
  36 0000               #-------------------------------
  37 0000               
  38 0000               #
  39 0000               
  40 0000               # ********** BEGIN STUDENT CODE BLOCK 1 **********
  41 0000               
  42 0000               #
  43 0000               # Make sure to add any .globl that you need here
  44 0000               #
  45 0000                       .globl  merge
  46 0000               # Name:         sort
  47 0000               # Description:  sorts an array of integers using the merge sort
  48 0000               #		algorithm
  49 0000               # 		Arguments Note: a1 and a2 specify the range inclusively
  50 0000               #
  51 0000               # Arguments:    a0:     a parameter block containing 3 values
  52 0000               #                       - the address of the array to sort
  53 0000               #                       - the address of the scrap array needed by merge
  54 0000               #                       - the address of the compare function to use
  55 0000               #                         when ordering data
  56 0000               #               a1:     the index of the first element in the range to sort
  57 0000               #               a2:     the index of the last element in the range to sort
  58 0000               # Returns:      none
  59 0000               #
  60 0000               sort:
  61 0000               
  62 0000 00A08821	        move    $s1, $a1
  63 0004 00C09021	        move    $s2, $a2
  64 0008 23BDFFF4	        addi    $sp, $sp, -12   #allocate room on stack
  65 000c AFB10000	        sw      $s1, 0($sp)
  66 0010 AFB20004	        sw      $s2, 4($sp)
  67 0014 AFBF0008	        sw      $ra, 8($sp)
  68 0018 00C54022	        sub     $t0, $a2, $a1
  69 001c 29090002	        slti    $t1, $t0, 2
  70 0020 15200011	        bne     $t1, $zero, done #if the size is trivial, return
  71 0024 34090002	        li      $t1, 2
  72 0028 00C9001A	        div     $s3, $a2, $t1   #get middle
     002c 00009812
  73 0030 02603821	        move    $a3, $s3        #middle of array to pass to merge
  74 0034 02603021	        move    $a2, $s3        #make lower half range
  75 0038 0C000000	        jal     sort            #Where the black magic happens
  76 003c 8FB10000	        lw      $s1, 0($sp)     #restore local vars from stack
  77 0040 8FB20004	        lw      $s2, 4($sp)
  78 0044 8FBF0008	        lw      $ra, 8($sp)
  79 0048 02403021	        move    $a2, $s2        #make upper half range
  80 004c 02602821	        move    $a1, $s3
  81 0050 0C000000	        jal     sort            #more black magic
  82 0054 8FB10000	        lw      $s1, ($sp)     #restore from stack
  83 0058 8FB20004	        lw      $s2, 4($sp)
  84 005c 8FBF0008	        lw      $ra, 8($sp)
  85 0060 23BD000C	        addi    $sp, $sp, 12
  86 0064 08000000	        j       merge           #call merge function
  87 0068               
  88 0068               done:
  89 0068 03E00008	        jr      $ra
  90 006c               # ********** END STUDENT CODE BLOCK 1 **********
  91 006c               #
  92 006c               # End of Merge sort routine.
  93 006c               #


PRINT_INT     = 00000001   
PRINT_STRING  = 00000004   
done            00000068 R  text 
merge           ******** XG
sort            00000000 R  text 
